name: Libvirt Action

on:
  push:
    branches: main
  workflow_dispatch:

jobs:
  Prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Update packages
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: sudo yum update -y

      - name: Install dependencies
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            if rpm -q libvirt &>/dev/null; \
            then echo "libvirt is installed."; \
            else sudo yum install qemu-kvm libvirt -y; \
            fi
            if [ -n "$(which terraform 2>/dev/null)" ]; \
            then echo "terraform is installed"; \
            else sudo yum install -y yum-utils; \
            sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo; \
            sudo yum -y install terraform; \
            fi


  Configure:
    needs: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout local git
        uses: actions/checkout@v4
      - name: Enable libvirt services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            if systemctl is-enabled libvirtd &> /dev/null; \
            then echo service has been enabled; \
            else sudo systemctl enable libvirtd.service; \
            fi
          
      - name: Configuring libvirt
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            if groups|grep libvirt &>/dev/null && groups|grep kvm &>/dev/null; \
            then echo user exist in libvirt and kvm groups; \
            else sudo usermod -aG libvirt $USER; \
            sudo usermod -aG kvm $USER; \
            newgrp libvirt; \
            fi

            sudo sed -i "s,#unix_sock_group,unix_sock_group,g" /etc/libvirt/libvirtd.conf
            sudo sed -i "s,#unix_sock_rw_perms,unix_sock_rw_perms,g" /etc/libvirt/libvirtd.conf

            if sudo grep ^user /etc/libvirt/qemu.conf &>/dev/null &&\
            sudo grep ^group /etc/libvirt/qemu.conf &>/dev/null; \
            then echo user and group exists; \
            else echo "user = \"$(whoami)\"" | sudo tee -a /etc/libvirt/qemu.conf; \
            echo 'group = "libvirt"' | sudo tee -a /etc/libvirt/qemu.conf; \
            fi

            mkdir -p ~/.config/libvirt/
            echo 'uri_default = "qemu:///system"' > ~/.config/libvirt/libvirt.conf

      - name: Restart libvirt services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: sudo systemctl restart libvirtd.service

      - name: Create pool
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            items=(${{ vars.POOL }})
            for i in "${items[@]}"; \
            do \
            if virsh pool-list --name|grep $i &>/dev/null; \
            then echo pool $i exist; \
            else mkdir -p ~/data/$i; \
            virsh pool-define-as --name $i --type dir --target ~/data/$i; \
            virsh pool-start $i; \
            virsh pool-autostart $i; \
            virsh pool-info $i; \
            fi
            done
      - name: Generate libvirt network
        run: |
          source scripts/generate-network.sh
          generate_net
        env:
          NETWORK_RAW: ${{ vars.NETWORK_RAW }}
          
      - uses: hashicorp/setup-terraform@v3
      - name: Validate terraform template
        id: validate
        run: |
          terraform init
          terraform validate

      - name: Upload template as artifact
        uses: actions/upload-artifact@v4
        if: steps.validate.outcome == 'success'
        with:
          name: libvirt_network_template
          path: cluster-network.tf
          overwrite: true

      - name: Download artifact template
        uses: actions/download-artifact@v4
        with:
          name: libvirt_network_template
          path: ${{ github.repository }}

      - name: Copy libvirt network
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: ${{ github.repository}}/*
          target: ${{ secrets.MYDIR }}

      - name: Applying libvirt network
        uses: appleboy/ssh-action@v1.0.3
        # if: ${{ always() && needs.Checking.result == 'success'}}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            ls -lh ${{ secrets.MYDIR }}
            cd ${{ secrets.MYDIR }}/${{ github.repository }}
            terraform init
            terraform apply -auto-approve
  Testing:
    needs:
      - Prepare
      - Configure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout local git
        uses: actions/checkout@v4

      - name: Import testing template cloud image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            if virsh vol-list ${{ vars.POOL_IMG }}|grep -i ${{ vars.TESTING_IMG }} &>/dev/null; \
            then echo testing image exist; \
            else wget -s ${{ vars.TESTING_IMG_URL }} -O ~/data/${{ vars.POOL_IMG }}/${{ vars.TESTING_IMG }}; \
            virsh pool-refresh ${{ vars.POOL_IMG }}; \
            fi

      - name: Create testing instance
        run: |
          echo ${{ secrets.INSTANCE_SPECS }} > testing-instance.txt
          bash scripts/terraform-gen/tfgen.sh testing testing-instance.txt
        env:
          TESTING_IMG: ${{ vars.TESTING_IMG }}
      
      - uses: hashicorp/setup-terraform@v3
      - name: Validate terraform template
        id: validate-vm
        run: |
          cd testing
          terraform init
          terraform validate

      - name: Copy testing instance template
        uses: appleboy/scp-action@v0.1.7
        if: steps.validate-vm.outcome == 'success'
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: testing-instance.txt
          target: ${{ secrets.MYDIR }}